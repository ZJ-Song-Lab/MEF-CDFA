readme = "README.md"
dependencies = [
    "numpy>=1.23.0,<=2.1.1", 
    "matplotlib>=3.3.0",
    "opencv-python>=4.6.0",
    "pillow>=7.1.2",
    "pyyaml>=5.3.1",
    "requests>=2.23.0",
    "scipy>=1.4.1",
    "torch>=1.8.0",
    "torch>=1.8.0,!=2.4.0; sys_platform == 'win32'", 
    "torchvision>=0.9.0",
    "tqdm>=4.64.0", # progress bars
    "psutil", # system utilization
    "py-cpuinfo", # display CPU info
    "pandas>=1.1.4",
    "seaborn>=0.11.0", # plotting
]

# Optional dependencies ------------------------------------------------------------------------------------------------
[project.optional-dependencies]
dev = [
    "ipython",
    "pytest",
    "pytest-cov",
    "coverage[toml]",
    "mkdocs>=1.6.0",
    "mkdocs-material>=9.5.9",
    "mkdocstrings[python]",
    "mkdocs-redirects", # 301 redirects
    "mkdocs-MESG-CDFA-plugin>=0.1.17", # for meta descriptions and images, dates and authors
    "mkdocs-macros-plugin>=1.0.5"  # duplicating content (i.e. export tables) in multiple places
]
export = [
    "onnx>=1.12.0", # ONNX export
    "coremltools>=7.0; platform_system != 'Windows' and python_version <= '3.11'", # CoreML supported on macOS and Linux
    "scikit-learn>=1.3.2; platform_system != 'Windows' and python_version <= '3.11'", # CoreML k-means quantization
    "openvino>=2024.0.0,<2025.0.0", # OpenVINO export
    "tensorflow>=2.0.0", 
    "tensorflowjs>=3.9.0", # TF.js export, automatically installs tensorflow
    "tensorstore>=0.1.63; platform_machine == 'aarch64' and python_version >= '3.9'", # for TF Raspberry Pi exports
    "keras", # not installed automatically by tensorflow>=2.16
    "flatbuffers>=23.5.26,<100; platform_machine == 'aarch64'", # update old 'flatbuffers' included inside tensorflow package
    "h5py!=3.11.0; platform_machine == 'aarch64'", # fix h5py build issues due to missing aarch64 wheels in 3.11 release
]
solutions = [
    "shapely>=2.0.0",    # shapely for point and polygon data matching
    "streamlit",    # for live inference on web browser i.e `yolo streamlit-predict`
]
logging = [
    "comet", 
    "tensorboard>=2.13.0",
    "dvclive>=2.12.0",
]
extra = [
    "hub-sdk>=0.0.12", 
    "ipython", # interactive notebook
    "albumentations>=1.4.6", # training augmentations
    "pycocotools>=2.0.7", # COCO mAP
]

[project.scripts]
yolo = "MESG-CDFA.cfg:entrypoint"
MESG-CDFA = "MESG-CDFA.cfg:entrypoint"

# Tools settings -------------------------------------------------------------------------------------------------------
[tool.setuptools]  # configuration specific to the `setuptools` build backend.
packages = { find = { where = ["."], include = ["MESG-CDFA", "MESG-CDFA.*"] } }
package-data = { "MESG-CDFA" = ["**/*.yaml", "../tests/*.py"], "MESG-CDFA.assets" = ["*.jpg"] }

[tool.setuptools.dynamic]
version = { attr = "MESG-CDFA.__version__" }

[tool.pytest.ini_options]
addopts = "--doctest-modules --durations=30 --color=yes"
markers = [
    "slow: skip slow tests unless --slow is set",
]
norecursedirs = [".git", "dist", "build"]

[tool.coverage.run]
source = ["ultralytics/"]
data_file = "tests/.coverage"
omit = ["MESG-CDFA/utils/callbacks/*"]

[tool.isort]
line_length = 120
multi_line_output = 0

[tool.yapf]
based_on_style = "pep8"
spaces_before_comment = 2
column_limit = 120
coalesce_brackets = true
spaces_around_power_operator = true
space_between_ending_comma_and_closing_bracket = true
split_before_closing_bracket = false
split_before_first_argument = false

[tool.ruff]
line-length = 120

[tool.ruff.format]
docstring-code-format = true

[tool.docformatter]
wrap-summaries = 120
wrap-descriptions = 120
pre-summary-newline = true
close-quotes-on-newline = true
in-place = true

[tool.codespell]
ignore-words-list = "crate,nd,ned,strack,dota,ane,segway,fo,gool,winn,commend,bloc,nam,afterall"
skip = '*.pt,*.pth,*.torchscript,*.onnx,*.tflite,*.pb,*.bin,*.param,*.mlmodel,*.engine,*.npy,*.data*,*.csv,*pnnx*,*venv*,*translat*,__pycache__*,*.ico,*.jpg,*.png,*.mp4,*.mov,/runs,/.git,./docs/??/*.md,./docs/mkdocs_??.yml'